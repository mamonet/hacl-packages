/*
 *    Copyright 2023 Cryspen Sarl
 *
 *    Licensed under the Apache License, Version 2.0 or MIT.
 *    - http://www.apache.org/licenses/LICENSE-2.0
 *    - http://opensource.org/licenses/MIT
 */

#include "util.h"

#include "krml/internal/target.h"
#ifdef HACL_CAN_COMPILE_AESNI_PCLMUL
#include "Hacl_AES_128_GCM_NI.h"
#endif
#include "Hacl_AES_128_GCM_M32.h"
#include "EverCrypt_AEAD.h"

const int INPUT_LEN = 1000;

static bytes plaintext(INPUT_LEN, 3);
static bytes key(16, 7);
static bytes aad(77, 9);
static bytes nonce(12, 9);
static bytes ciphertext(INPUT_LEN + 16, 0);
static bytes mac(16, 0);

static bytes expected_ciphertext = {
  0xa1, 0xad, 0x69, 0x52, 0x5a, 0xd6, 0xcf, 0xa8, 0x09, 0x62, 0x5b, 0x03, 0xca,
  0x4c, 0xb7, 0x73, 0x3a, 0x26, 0x72, 0x2b, 0x9e, 0x3a, 0x41, 0x61, 0x5d, 0x1f,
  0xd5, 0x88, 0x8d, 0xbc, 0x5a, 0xa9, 0x41, 0x0b, 0x08, 0x75, 0xb1, 0xab, 0x13,
  0x12, 0xd7, 0xc6, 0x09, 0x1f, 0x7a, 0x73, 0xcc, 0x67, 0x9e, 0x8a, 0xf9, 0x4a,
  0x39, 0x8e, 0x52, 0xf4, 0x2b, 0x5b, 0xac, 0x50, 0xd0, 0xb2, 0x42, 0xd3, 0x9a,
  0x64, 0x0b, 0x60, 0x45, 0x13, 0xe6, 0x06, 0x15, 0x2c, 0x9f, 0x9f, 0x06, 0x18,
  0x62, 0x59, 0xfd, 0x09, 0xaf, 0xfd, 0xc5, 0x9c, 0xa1, 0x44, 0xe2, 0x8a, 0xfc,
  0xa8, 0x67, 0x0f, 0x56, 0x8c, 0x74, 0x8d, 0x6a, 0xc7, 0xe5, 0xde, 0xcf, 0x40,
  0xc6, 0x7e, 0x90, 0xf9, 0x0a, 0x7e, 0x13, 0xdc, 0x8a, 0x75, 0xc7, 0x63, 0xfd,
  0xc1, 0xb6, 0x4f, 0xca, 0x5a, 0x2b, 0xc5, 0x02, 0xf6, 0x75, 0xeb, 0x35, 0x42,
  0x15, 0x86, 0x0e, 0x8d, 0x51, 0xb0, 0xf5, 0xd3, 0x88, 0xe1, 0x8c, 0x3c, 0x03,
  0x60, 0x9f, 0xf4, 0x9e, 0xaa, 0x91, 0x36, 0x3a, 0x24, 0xed, 0x92, 0x59, 0xc7,
  0x45, 0xf5, 0xc4, 0xcf, 0x4e, 0x01, 0xca, 0x23, 0x54, 0x1b, 0xe0, 0xa9, 0x3c,
  0x54, 0xce, 0xbc, 0x99, 0x16, 0xa9, 0x46, 0x41, 0xa9, 0x4f, 0xf2, 0xe2, 0x31,
  0xaf, 0xb4, 0x53, 0xa7, 0xbe, 0x35, 0xa9, 0xbf, 0x59, 0x54, 0xcb, 0x8f, 0x9b,
  0xbe, 0xf5, 0x71, 0x2f, 0x2d, 0x38, 0x57, 0x1f, 0x1b, 0x48, 0x06, 0x8e, 0x34,
  0x40, 0xd2, 0x90, 0x86, 0x4b, 0xb1, 0x4d, 0x61, 0x38, 0xa3, 0x0f, 0x4b, 0xbc,
  0xd2, 0xad, 0x1f, 0x33, 0x23, 0x5d, 0x99, 0x6a, 0x9a, 0x29, 0x25, 0xf4, 0x01,
  0x62, 0x24, 0x75, 0xe1, 0x3a, 0x50, 0x2e, 0x29, 0xaf, 0xf7, 0x5d, 0x25, 0x74,
  0x66, 0x18, 0x51, 0xf6, 0x3c, 0x81, 0x04, 0x82, 0x40, 0x80, 0x2f, 0x9f, 0xaa,
  0x4d, 0x18, 0x34, 0xdd, 0x55, 0x33, 0x9a, 0xd5, 0xef, 0x2c, 0x46, 0xaa, 0x2e,
  0xb8, 0xfc, 0x66, 0x6f, 0x81, 0x54, 0x70, 0x04, 0x6a, 0x45, 0x4e, 0x6a, 0x38,
  0x8f, 0x2c, 0xcb, 0xe5, 0x52, 0x4b, 0x1e, 0xdd, 0x12, 0x20, 0xb9, 0xbe, 0xca,
  0x46, 0x33, 0x03, 0xfb, 0x56, 0x3c, 0x06, 0x9c, 0x84, 0x6b, 0x8c, 0x01, 0xcb,
  0x0b, 0xfc, 0x3a, 0x68, 0xd4, 0x16, 0xe0, 0x30, 0x76, 0x2b, 0xbb, 0xa9, 0xfa,
  0xde, 0xf6, 0x8e, 0xd2, 0x04, 0x2b, 0x51, 0xfd, 0x5a, 0x32, 0xb6, 0x1a, 0x74,
  0x35, 0xda, 0x4f, 0x73, 0xe0, 0x27, 0xa9, 0xc6, 0xbb, 0xe3, 0x8f, 0x6f, 0x3c,
  0xa1, 0x52, 0x23, 0x4c, 0x8a, 0x32, 0xea, 0x66, 0x97, 0xc6, 0xa8, 0x5d, 0x93,
  0xb9, 0x3a, 0x5e, 0xd8, 0xd9, 0x90, 0x44, 0x0c, 0xad, 0x65, 0x03, 0xfc, 0x76,
  0x3a, 0xa6, 0x9e, 0x4f, 0xef, 0x05, 0xd7, 0x04, 0x1a, 0x47, 0xbd, 0x43, 0x1b,
  0x6b, 0x82, 0xe7, 0xcf, 0x71, 0xdb, 0xed, 0x07, 0x20, 0x55, 0x93, 0x2c, 0xfd,
  0x57, 0x30, 0x9f, 0xcd, 0x33, 0x57, 0x26, 0xfd, 0xd1, 0x29, 0xdc, 0x40, 0xe7,
  0x68, 0xb4, 0x97, 0xf2, 0x46, 0x2c, 0x8d, 0x3e, 0x99, 0x7b, 0x77, 0xcf, 0x44,
  0xf7, 0x54, 0x24, 0x6d, 0x96, 0x78, 0x0d, 0x56, 0xe4, 0x3e, 0x54, 0x7d, 0xce,
  0x5b, 0x86, 0x59, 0x33, 0xc3, 0x64, 0x02, 0x72, 0x1a, 0xfd, 0x79, 0x08, 0x3d,
  0xd2, 0x9e, 0xd8, 0x47, 0x74, 0x18, 0xe7, 0xaf, 0x15, 0x17, 0xa5, 0xfa, 0xb0,
  0x54, 0x8d, 0xb8, 0x78, 0x74, 0xa0, 0x56, 0x7e, 0xbd, 0x8c, 0x3e, 0x62, 0xb2,
  0x4f, 0x19, 0x89, 0xa3, 0xea, 0x81, 0xd0, 0x45, 0x39, 0x4b, 0x43, 0xd1, 0xd8,
  0xe7, 0xcb, 0xce, 0xbf, 0xd4, 0x2c, 0xed, 0x93, 0xd2, 0x7b, 0x75, 0x59, 0x8e,
  0x4d, 0x8a, 0x58, 0x0f, 0xa6, 0xbb, 0xf0, 0xd0, 0xa7, 0x86, 0xa5, 0xa6, 0x73,
  0x49, 0x77, 0x54, 0x14, 0x95, 0x86, 0xd0, 0xd5, 0x86, 0x12, 0xc5, 0x06, 0x56,
  0xff, 0x60, 0x1b, 0xe5, 0x77, 0xd8, 0x0b, 0x16, 0x48, 0xfc, 0x44, 0xd0, 0x85,
  0x71, 0x43, 0xbd, 0x4f, 0xbf, 0x2d, 0x3b, 0xef, 0x73, 0xf3, 0xbe, 0x51, 0x7f,
  0x2f, 0xd1, 0xc3, 0x1e, 0xb9, 0xd9, 0x16, 0xe8, 0xc4, 0x09, 0xaf, 0x5a, 0x03,
  0x05, 0x3b, 0x24, 0xf6, 0x5e, 0xe1, 0x62, 0x2c, 0xb3, 0xb8, 0x0a, 0x5f, 0xc5,
  0x21, 0x59, 0xc1, 0x48, 0x5e, 0x9b, 0x7d, 0x7f, 0xaf, 0xbf, 0x7d, 0xc0, 0x63,
  0x79, 0x3a, 0xe6, 0xc7, 0x4b, 0x37, 0x36, 0xc6, 0xf4, 0xb2, 0x21, 0x82, 0xca,
  0x48, 0x30, 0xaf, 0xe0, 0x32, 0xaf, 0xcc, 0x9a, 0xea, 0x2b, 0xe2, 0x98, 0x92,
  0x58, 0xe7, 0x46, 0x4a, 0x93, 0x60, 0x30, 0x88, 0x3f, 0xff, 0xe1, 0xf1, 0xde,
  0x56, 0x7f, 0x66, 0xe7, 0xde, 0x68, 0x45, 0x8c, 0x7f, 0x2a, 0x1c, 0xbd, 0x0c,
  0xd5, 0x64, 0xec, 0xf5, 0x01, 0xac, 0xc1, 0x35, 0x13, 0x97, 0x28, 0x18, 0xc8,
  0xb7, 0x0f, 0xdf, 0xec, 0x39, 0x7d, 0x8e, 0xc1, 0x5c, 0x14, 0x5f, 0x81, 0xfe,
  0x62, 0x26, 0xad, 0x80, 0x59, 0x02, 0x00, 0x15, 0x6c, 0x26, 0xe7, 0xd6, 0x47,
  0xd2, 0xfa, 0x43, 0xee, 0xc7, 0x74, 0x48, 0x3e, 0x49, 0xc2, 0x0f, 0x11, 0x0a,
  0x34, 0x3a, 0xb2, 0x66, 0x45, 0x59, 0x54, 0xd6, 0x02, 0xc6, 0x09, 0x11, 0x4b,
  0xdd, 0x01, 0x5b, 0x4b, 0x5f, 0xeb, 0x65, 0x23, 0x34, 0x33, 0x37, 0x6e, 0x8f,
  0x3c, 0xcc, 0x64, 0x44, 0x13, 0x31, 0x4b, 0x04, 0x99, 0x67, 0xc4, 0x0b, 0x64,
  0x05, 0x89, 0xa0, 0x30, 0x2c, 0xc5, 0x5c, 0x75, 0xdd, 0x7a, 0x80, 0xed, 0x49,
  0x04, 0x92, 0x6c, 0xc3, 0x8b, 0x53, 0xba, 0x6d, 0x4d, 0x27, 0x65, 0x7d, 0xc5,
  0xb9, 0xf3, 0x10, 0x4d, 0x51, 0xbd, 0x0f, 0x00, 0xca, 0xc1, 0xcc, 0x5b, 0xa0,
  0x4d, 0xa5, 0xd3, 0xb8, 0x33, 0xf1, 0x43, 0xac, 0x44, 0xd9, 0x96, 0x05, 0xd4,
  0xd9, 0x47, 0x61, 0x9b, 0x23, 0x19, 0x1c, 0x28, 0x66, 0x75, 0xce, 0x34, 0xb2,
  0x51, 0x09, 0x3e, 0x34, 0xe1, 0xc7, 0x06, 0x42, 0x13, 0x7c, 0x58, 0x0b, 0xdc,
  0x0d, 0xc5, 0xaf, 0xd1, 0x04, 0x88, 0x0c, 0x0b, 0xf4, 0x37, 0x82, 0xed, 0xf2,
  0x95, 0xfc, 0x6a, 0x7b, 0x31, 0xe1, 0xaf, 0x02, 0x60, 0x0a, 0x02, 0x78, 0x5e,
  0x1e, 0xe9, 0x12, 0x66, 0x38, 0xa4, 0x01, 0x06, 0x1c, 0x1b, 0xa3, 0xd2, 0x7c,
  0x10, 0x84, 0x50, 0xdc, 0x1e, 0x02, 0x79, 0x13, 0x0c, 0xd8, 0x45, 0xf7, 0xcd,
  0xb6, 0x47, 0x51, 0xb0, 0xa8, 0x8a, 0x5a, 0x71, 0x4e, 0x8d, 0xd5, 0x6f, 0x0e,
  0x64, 0x85, 0xa3, 0x81, 0xc6, 0x3f, 0xdf, 0x95, 0xe7, 0xd9, 0x10, 0xa9, 0x15,
  0x3a, 0xaa, 0x70, 0x35, 0xb6, 0x5b, 0x66, 0x27, 0x25, 0xb0, 0x4a, 0x82, 0xbf,
  0x8f, 0xda, 0x93, 0x3e, 0x3e, 0x4b, 0x56, 0xdb, 0x0d, 0xc4, 0x60, 0x05, 0x6f,
  0xd6, 0x8c, 0xec, 0x6a, 0x02, 0xe6, 0x36, 0x81, 0x32, 0x90, 0x0b, 0x55, 0x3b,
  0x62, 0x1d, 0x07, 0x30, 0xd2, 0x82, 0x8f, 0x40, 0x07, 0xeb, 0xe2, 0x44, 0x45,
  0x1b, 0x71, 0x7d, 0xe5, 0xfc, 0xac, 0xba, 0x0e, 0x72, 0x1a, 0xf2, 0x85, 0x07,
  0xee, 0xce, 0xd7, 0xbf, 0xaa, 0xe4, 0xf3, 0xf3, 0x18, 0x13, 0xbd, 0xcd, 0xf4,
  0xa5, 0xda, 0xa0, 0xf3, 0x31, 0x6f, 0x61, 0x8e, 0x37, 0x2b, 0xe3, 0x80, 0x47,
  0x8d, 0x1e, 0x03, 0xaf, 0x1f, 0x14, 0x7e, 0xdb, 0x3d, 0x4b, 0xfc, 0x42, 0xa7,
  0x3c, 0x58, 0x15, 0x8e, 0x78, 0xef, 0xaa, 0xff, 0x3c, 0x10, 0xd5, 0x96, 0x8a,
  0xf7, 0xe3
};

#ifdef HACL_CAN_COMPILE_AESNI_PCLMUL
static void
HACL_AES_128_GCM_NI_encrypt(benchmark::State& state)
{
  for (auto _ : state) {
    Lib_IntVector_Intrinsics_vec128 *ctx = (Lib_IntVector_Intrinsics_vec128 *)KRML_HOST_CALLOC((uint32_t)352U, sizeof (uint8_t));
    Hacl_AES_128_GCM_NI_aes128_gcm_init(ctx, key.data());
    Hacl_AES_128_GCM_NI_aes128_gcm_compute_iv(ctx, nonce.size(), nonce.data());
    Hacl_AES_128_GCM_NI_aes128_gcm_encrypt(ctx, INPUT_LEN, ciphertext.data(), plaintext.data(), aad.size(), aad.data());
    KRML_HOST_FREE(ctx);
    if (ciphertext != expected_ciphertext) {
      state.SkipWithError("Wrong ciphertext");
      break;
    }
  }
}

BENCHMARK(HACL_AES_128_GCM_NI_encrypt)->Setup(DoSetup);
#endif

static void
HACL_AES_128_GCM_M32_encrypt(benchmark::State& state)
{
  for (auto _ : state) {
    uint64_t *ctx = (uint64_t *)KRML_HOST_CALLOC((uint32_t)3168U, sizeof (uint8_t));
    Hacl_AES_128_GCM_M32_aes128_gcm_init(ctx, key.data());
    Hacl_AES_128_GCM_M32_aes128_gcm_compute_iv(ctx, nonce.size(), nonce.data());
    Hacl_AES_128_GCM_M32_aes128_gcm_encrypt(ctx, INPUT_LEN, ciphertext.data(), plaintext.data(), aad.size(), aad.data());
    KRML_HOST_FREE(ctx);
    if (ciphertext != expected_ciphertext) {
      state.SkipWithError("Wrong ciphertext");
      break;
    }
  }
}

BENCHMARK(HACL_AES_128_GCM_M32_encrypt)->Setup(DoSetup);

static void
EverCrypt_AES128_GCM_encrypt(benchmark::State& state)
{
  for (auto _ : state) {
    EverCrypt_AEAD_state_s* ctx;
    EverCrypt_Error_error_code res = EverCrypt_AEAD_create_in(
      Spec_Agile_AEAD_AES128_GCM, &ctx, key.data());

    if (res != EverCrypt_Error_Success) {
      state.SkipWithError("Could not allocate AEAD state.");
      break;
    }

    EverCrypt_AEAD_encrypt(ctx,
                           nonce.data(),
                           nonce.size(),
                           aad.data(),
                           aad.size(),
                           plaintext.data(),
                           INPUT_LEN,
                           ciphertext.data(),
                           mac.data());

    EverCrypt_AEAD_free(ctx);
  }

  if (ciphertext != expected_ciphertext) {
    state.SkipWithError("Wrong ciphertext");
  }
}

BENCHMARK(EverCrypt_AES128_GCM_encrypt)->Setup(DoSetup);

#ifndef NO_OPENSSL
static void
OpenSSL_aes_128_gcm_encrypt(benchmark::State& state)
{
  for (auto _ : state) {
    int out_len, unused_len;
    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    int result = EVP_EncryptInit_ex2(
      ctx, EVP_aes_128_gcm(), key.data(), nonce.data(), NULL);
    if (result != 1) {
      state.SkipWithError("");
      EVP_CIPHER_CTX_free(ctx);
      break;
    }
    result = EVP_EncryptUpdate(
      ctx, ciphertext.data(), &out_len, plaintext.data(), INPUT_LEN);
    if (result != 1) {
      state.SkipWithError("");
      EVP_CIPHER_CTX_free(ctx);
      break;
    }
    result = EVP_EncryptFinal_ex(ctx, plaintext.data() + out_len, &unused_len);
    if (result != 1 || unused_len != 0) {
      state.SkipWithError("");
      EVP_CIPHER_CTX_free(ctx);
      break;
    }
    EVP_CIPHER_CTX_free(ctx);
    if (ciphertext != expected_ciphertext) {
      state.SkipWithError("Wrong ciphertext");
      break;
    }
  }
}

BENCHMARK(OpenSSL_aes_128_gcm_encrypt)->Setup(DoSetup);
#endif

BENCHMARK_MAIN();
